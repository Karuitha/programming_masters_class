---
title: "LOOPS"
author: "John Karuitha, PhD"
editor: visual
date: today
bibliography: bibliography.bib
date-format: long
format: 
    pdf: 
        number-sections: true
        number-depth: 3
header-includes:
- \usepackage{titling}
- \pretitle{\begin{center}\LARGE\includegraphics[width=5cm, height=5cm]{Untitled.png}\\[\bigskipamount]}
- \posttitle{\end{center}}
---

# Introduction to Loops in Python

Loops are a fundamental concept in programming that allow us to repeat a block of code multiple times. In Python, there are two main types of loops: `for` loops and `while` loops. Understanding how to use these loops will help you automate repetitive tasks, process data, and solve problems more efficiently.

# **`for` Loop**

A `for` loop is used to iterate over a sequence (like a list, tuple, string, or range) and execute a block of code for each element in that sequence [@downey2024think; @mckinney2022python].

**Syntax:**

``` python
for item in sequence:
    # Code block to execute
```

**Example 1: Iterating Over a List**

``` python
fruits = ["apple", "banana", "cherry"]
for fruit in fruits:
    print(fruit)
```

*Output:*

```         
apple
banana
cherry
```

**Example 2: Using `range()` to Repeat Code**

``` python
for i in range(5):
    print("Hello, world!")
```

*Output:*

```         
Hello, world!
Hello, world!
Hello, world!
Hello, world!
Hello, world!
```

-   `range(5)` generates a sequence of numbers from 0 to 4.

# 2. **`while` Loop**

A `while` loop repeats a block of code as long as a condition is true. This loop is useful when you donâ€™t know in advance how many times you need to repeat the code.

**Syntax:**

``` python
while condition:
    # Code block to execute
```

**Example 3: Counting Down**

``` python
count = 5
while count > 0:
    print(count)
    count -= 1
```

*Output:*

```         
5
4
3
2
1
```

# 3. **Loop Controls: `break` and `continue`**

Sometimes, you may want to alter the flow of a loop. Python provides two keywords for this: `break` and `continue`.

## **`break` Statement**

The `break` statement is used to exit the loop immediately, regardless of the loop's condition.

**Example 4: Stop the Loop When a Condition is Met**

``` python
for number in range(10):
    if number == 5:
        break
    print(number)
```

*Output:*

```         
0
1
2
3
4
```

-   The loop stops when `number` is 5.

## **`continue` Statement**

The `continue` statement skips the rest of the code inside the loop for the current iteration and moves on to the next iteration.

**Example 5: Skip Even Numbers**

``` python
for number in range(10):
    if number % 2 == 0:
        continue
    print(number)
```

*Output:*

```         
1
3
5
7
9
```

-   The loop skips even numbers and prints only odd numbers.

# 4. **Practical Examples**

## Example 6: Summing Numbers Using a `for` Loop

``` python
numbers = [1, 2, 3, 4, 5]
total = 0
for num in numbers:
    total += num
print("Total:", total)
```

*Output:*

```         
Total: 15
```

## Example 7: Simple Password Checker Using a `while` Loop

``` python
password = ""
while password != "python123":
    password = input("Enter the password: ")
print("Access granted!")
```

*Output:* (If user enters `python123`)

```         
Enter the password: python123
Access granted!
```

# **Summary**

-   Use `for` loops when you know how many times you want to iterate.
-   Use `while` loops when you need to keep repeating as long as a condition is true.
-   Use `break` to exit a loop early.
-   Use `continue` to skip to the next iteration.

By mastering loops, you can write more efficient and less repetitive code! A central mantra in programming is "Don't repeat yourself (DRY)".

# **References** {.unnumbered}